# What is JavaScript:
------------------------------
=>JavaScript is a lightweight, interpreted programming language.
=>It is commonly used to create dynamic and interactive elements in web applications.
=>Designed for creating network-centric applications.
=>Complementary to and integrated with Java and HTML.
=>Open and cross-platform
=>Using JavaScript we can change the HTML Elements behaviour.

JavaScript is a single-threaded programming language that we can use for client-side or server-side development. It is a dynamically typed programming language, which means that we donâ€™t care about variable data types while writing the JavaScript code. Also, it contains the control statements, operators, and objects like Array, Math, Data, etc.

Note:- 
-> We can write javascript code in <script></script> tag

-> Or we can write javascript code in external file for example "example.js"

-> the extension of javascript will be ".js"

# Features of JavaScript:
---------------------------
=> All popular web browsers support JavaScript as they provide built-in execution environments.

=> JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language.

=> JavaScript is a weakly typed language, where certain types are implicitly cast (depending on the operation).

=> JavaScript is an object-oriented programming language that uses prototypes rather than using classes for inheritance.

=> It is a light-weighted and interpreted language.

=> It is a case-sensitive language.

=> JavaScript is supportable in several operating systems including, Windows, macOS, etc.

=> It provides good control to the users over the web browsers.

# Applications of JavaScript:
-----------------------------------
JavaScript is used to create interactive websites. It is mainly used for:

-> Client-side validation
-> Dynamic drop-down menus
-> Displaying date and time
-> Displaying pop-up windows and dialog boxes (like an alert dialog box, confirm dialog box 
    and prompt dialog box)
-> Displaying clocks etc.

JavaScript Example:
<script>  
    document.write("Hello AD Class");  
</script>  

# JavaScript Comment:
------------------------
advantage:
-> To make code easy to understand
-> To avoid the unnecessary code

1. Single-line Comment
2. Multi-line Comment

# JavaScript Variable:
-------------------------------------
A JavaScript variable is simply a name of storage location. There are two types of variables in JavaScript : 
local variable and global variable.

=> Javascript Local Variable:
A JavaScript local variable is declared inside block or function. It is accessible within the function or block only.

=> Javascript Global Variable:
A JavaScript global variable is accessible from any function. A variable i.e. declared outside the function or declared with window object is known as global variable.

=> There are some rules while declaring a JavaScript variable (also known as identifiers).:
1. Name must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.
2. After first letter we can use digits (0 to 9), for example value1.
3. JavaScript variables are case sensitive, for example x and X are different variables.

Variables are Containers for Storing Data
JavaScript Variables can be declared in 4 ways:

-> Automatically
-> Using var
-> Using let
-> Using const

# JavaScript let keyword:
-> JavaScript let keyword was introduced in ES6(2015).
-> variable declared with let have Block Scope.
-> Variables declared with let must be Declared before Use.
-> Variable Declared with let cannot be Redeclared in the same Scope.

# JavaScript const keyword:
-> The const keyword was introduced in ES6(2015).
-> Variable defined with const cannot be redeclared.
-> variable defined with const can not be reassigned.
-> variable defined with const have block scope.

Note:- Always declare a variable with const when you know that the value should not be changed.

#Javascript Data Types:
--------------------------------
JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.

1. Primitive data type
2. Non-primitive (reference) data type

JavaScript primitive data types:
Data Type	 Description
String	   - represents sequence of characters e.g. "hello"
Number	   - represents numeric values e.g. 1234
Boolean	   - represents boolean value either false or true
Undefined   - represents undefined value
Null	      - represents null i.e. no value at all

2. JavaScript non-primitive data types:
Object - represents instance through which we can access members
Array  -	represents group of similar values
RegExp -	represents regular expression

Most Programming language have many number types:
Whole numbers(integers):
byte(8-bit)
short(16-bit)
int(32-bit)
long(64-bit)

# Javascript BigInt:
--------------------
All Javascript Numbers are stored in a 64-bit floating-point formats.
JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are
too big to be represented by a normal JavaScript numbers.
Example:
let abc = bigInt("012345678901234567893425235234");

JavaScript Objects:
-----------------------
JavaScript Objects are written with curly braces {}.
Objects properties are written as name:value pairs, separated by commas.


# JAVASCRIPT OPERATORS:
--------------------------------------------------
-> JavaScript operators are symbols that are used to perform operations on operands.
-> Javascript operators are used to perform different types of mathematical and logical computations.

=> There are following types of operators in JavaScript:

1. Arithmetic Operators
2. Comparison (Relational) Operators
3. Bitwise Operators
4. Logical Operators
5. Assignment Operators
6. Special Operators

1. JavaScript Arithmetic Operators:
   Arithmetic operators are used to perform arithmetic operations on Numbers.
Operator	  Description	
+	        Addition	        
-	        Subtraction	        
*	        Multiplication	    
/	        Division	        
%	        Modulus (Remainder)	
++	        Increment	        
--	        Decrement	        

2. JavaScript Comparison(Relational) Operators:
   The JavaScript comparison operator compares the two operands.
Operator	  Description
==	        equal to
===	     equal value and equal type
!=	        not equal
!==	     not equal value or not equal type
>	        greater than
<	        less than
>=	        greater than or equal to
<=	        less than or equal to
?	        ternary operator

3. JavaScript Bitwise Operators:
   The bitwise operators perform bitwise operations on operands.

Operator	  Description	
&	        Bitwise AND	
|	        Bitwise OR	
^	        Bitwise XOR	
~	        Bitwise NOT	
<<	        Bitwise Left Shift	
>>	        Bitwise Right Shift	
>>>	     Bitwise Right Shift with Zero	 

4. JavaScript Logical Operators:
Operator	   Description
&&	         logical and
||	         logical or
!	         logical not

5. Assignment Operators:
Operator	      Description	
=	            Assign
+=             Add and Assign
-=             Subtract and Assign		
*=	            Multiply and assign	
/=	            Divide and assign	var 
%=	            Modulus and assign	

6. JavaScript Special Operator:
Operator	      Description
(?:)	      -  Conditional Operator returns value based on the condition. It is like if-else.
,	         -  Comma Operator allows multiple expressions to be evaluated as single statement.
delete	   -  Delete Operator deletes a property from the object.
in	         -  In Operator checks if object has the given property
instanceof  -  checks if the object is an instance of given type
new	      -  creates an instance (object)
typeof	   -  checks the type of object.
void	      -  it discards the expression's return value.
yield	      -  checks what is returned in a generator by the generator's iterator.

-------------------------------------------------------------------------------------------------------
# JAVASCRIPT CONDITIONAL STATEMENT
-------------------------------------------------------------------------------------------------------
JavaScript conditional statements allow you to execute specific blocks of code based on conditions. 
If the condition is met, a particular block of code will run; otherwise, another block of code will
execute based on the condition.

=> In JavaScript we have the following conditional statements:
1. if Statement
2. if else statement
3. if else if statement
4. switch statement

1. if statement:
----------------
   if Statement Executes a block of code if the specified condition is true.
   Syntax:
   if (condition) 
   {
    // code to execute if condition is true
   }

2. if else statement:
---------------------
   the else statement to specify a block of code to be executed if the condition is false.
   Syntax:
   if (condition) 
   {
    // code to be executed if condition is true
   } 
   else 
   {
    // code to be executed if condition is false
   }

3. if else if statement:
------------------------
It evaluates the content only if expression is true from several expressions.
Or the else if statement to specify a new condition if the first condition is false.

Syntax:
if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}

4. switch Statement:
--------------------
The switch statement is used to perform different actions based on different conditions.
Or the switch statement to select one of many code blocks to be executed.
Syntax:
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

---------------------------------------------------------------------------------------------------------
# JAVASCRIPT LOOPS
--------------------------------------------------------------------------------------------------------
-> In JavaScript, loops are used to execute a block of code repeatedly until a specified condition is met. 
-> The JavaScript loops are used to iterate the piece of code using for, while, do while loops. 
   It makes the code compact. It is mostly used in array.

  Types Of Loops in Javascript:
  1. for loop
  2. while loop
  3. do-while loop

  1. for loop:
  -------------
  Executes a block of code a specified number of times.
  syntax:
  for (initialization; condition; increment/decrement) 
  {
    // code block to be executed
  }

  2. while loop:
  --------------
  The while loop executes a block of code as long as a specified condition is true.
  Syntax:
  while (condition)  
  {  
    code to be executed  
  }  

  3. do-while loop:
  -----------------
  The JavaScript do while loop iterates the elements for the infinite number of times like while loop. But, code is executed at least once whether condition is true or false. 
  Syntax:
  do
  {  
    code to be executed  
  }
  while (condition);  



-----------------------------------------------------------------------------------------------------------------------------
 # JAVASCRIPT FUNCTIONS:
 ----------------------------------------------------------------------------------------------------------------------------
 A function in JavaScript is a group of reusable code that can be called anywhere in your 
 program. It eliminates the need of writing the same code again and again.

 =>Advantage of JavaScript function:
 -----------------------------------
 -> Code reusability: We can call a function several times so it save coding.
 -> Less coding     : It makes our program compact. We donâ€™t need to write many lines of 
                      code each time to perform a common task.

=> Why to use Functions:
  -> With functions you can reuse code.
  -> You can write code that can be used many times.
  -> You can use the same code with different arguments, to produce different results.

Syntax:
function functionName() {
    // code to be executed
}

Syntax with parameter:
function functionName(parameter-names) {
   // code to be executed
}


----------------------------------------------------------------------------------------------------------------------------------
# JAVASCRIPT OBJECTS:
----------------------------------------------------------------------------------------------------------------------------------
-> A javaScript object is an entity having state and behavior (properties and method). 
-> objects are things like: houses, cars, people, animals, pen, bike, chair, glass, keyboard, monitor or any other subjects.
-> JavaScript is an object-based language. Everything is an object in JavaScript.

=>JavaScript objects Properties:
The named values, in javaScript objects,are called properties.
syntax: objectName.propertyName
        objectName["propertyName"]

=>JavaScript Object Methods:
Methods are actions that can be performed on objects.
Methods are function definition stored as property values.

for example car is an Object:
properties:                                   
name = Mahindra                            
model = 2101
weight = 1000kg
color = red
height
width
  
Methods:
start()
drive()
brake()
stop()

=> Creating Objects in JavaScript:
----------------------------------
-> Using an Object Literal
-> Using the new Keyword
-> Using an Object Constructor

1. JavaScript Object Literal:
  An object literal is a list of name:value pairs inside curly braces {}.
  syntax:
  object={property1:value1,property2:value2.....propertyN:valueN}  

  Note:-
  name:value pairs are also called key:value pairs.
  object literals are also called object initializers.

2. Creating Objects by instance of Objects:
  Syntax:
  var objectname=new Object(); 

3. By using an Object constructor :
  you need to create function with arguments. Each argument value can be assigned in the 
  current object by using 'this' keyword.
  The 'this' keyword refers to the current object.



 ---------------------------------------------------------------------------------------------
  # JavaScript Arrays
  -----------------------------------------------------------------------------------------------
  Arrays in JavaScript are used to store multiple values in a single variable.
  They are versatile and can hold different types of data, including numbers, 
  strings, objects, and even other arrays.

  An array in JavaScript is defined using square brackets []. Elements inside 
  the array are separated by commas ','.
  
  Syntax:
  let array_name = [item1, item2, ...];

  Note: Array indexes start with 0.
        [0] is the first element. [1] is the second element.

  2) JavaScript Array directly (new keyword):
  Syntax:
  var arrayname=new Array();  
  Here, new keyword is used to create instance of array.

  ----------------------------------------------------------------------------------------------------
  # JavaScript Strings
  ----------------------------------------------------------------------------------------------------
  JavaScript String is a sequence of characters, typically used to represent text. 
  It is enclosed in single or double quotes and supports various methods for text manipulation.

  Example: let str = 'I am a String';

  ----------------------------------------------------------------------------------------------------------
  # JavaScript Date Object
  ----------------------------------------------------------------------------------------------------------
  The JavaScript date object can be used to get year, month and day. You can display a timer on the webpage
  by the help of JavaScript date object.

  You can use different Date constructors to create date object. It provides methods to get and set day,
  month, year, hour, minute and seconds.

  Constructor
  ------------
  You can use 4 variant of Date constructor to create date object.
  -> Date()
  -> Date(milliseconds)
  -> Date(dateString)
  -> Date(year, month, day, hours, minutes, seconds, milliseconds)


 => JavaScript Date Methods:
 ---------------------------
Method	          Description
getFullYear()	    => Get year as a four digit number (yyyy)
getMonth()	      => Get month as a number (0-11)
getDate()	        => Get day as a number (1-31)
getDay()	        => Get weekday as a number (0-6)
getHours()	      => Get hour (0-23)
getMinutes()	    => Get minute (0-59)
getSeconds()	    => Get second (0-59)
getMilliseconds()	=> Get millisecond (0-999)
getTime()	        => Get time (milliseconds since January 1, 1970)

=> JavaScript Set Date Methods:
------------------------------
Set Date methods let you set date values (years, months, days, hours, minutes, seconds, milliseconds) for a Date Object.
Method	          Description
setDate()	        => Set the day as a number (1-31)
setFullYear()	    => Set the year (optionally month and day)
setHours()	      => Set the hour (0-23)
setMilliseconds()	=> Set the milliseconds (0-999)
setMinutes()	    => Set the minutes (0-59)
setMonth()	      => Set the month (0-11)
setSeconds()	    => Set the seconds (0-59)
setTime()	        => Set the time (milliseconds since January 1, 1970)

-------------------------------------------------------------------------------------------------------
# JavaScript Math Object:
--------------------------------------------------------------------------------------------------------
The JavaScript math object provides several constants and methods to perform mathematical operation.
Unlike date object, it doesn't have constructors.

Syntax:
Math.method(number)

=> JavaScript Math Methods:
---------------------------
Methods	  Description
abs()	    => It returns the absolute value of the given number.
acos()	  => It returns the arccosine of the given number in radians.
asin()	  => It returns the arcsine of the given number in radians.
atan()    => It returns the arc-tangent of the given number in radians.
cbrt()	  => It returns the cube root of the given number.
ceil()	  => It returns a smallest integer value, greater than or equal to the given number.
cos() 	  => It returns the cosine of the given number.
cosh()	  =>  It returns the hyperbolic cosine of the given number.
exp()	    => It returns the exponential form of the given number.
floor()   => It returns largest integer value, lower than or equal to the given number.
hypot()	  => It returns square root of sum of the squares of given numbers.
log()	    => It returns natural logarithm of a number.
max()	    => It returns maximum value of the given numbers.
min()	    => It returns minimum value of the given numbers.
pow()	    => It returns value of base to the power of exponent.
random()  => It returns random number between 0 (inclusive) and 1 (exclusive).
round()	  => It returns closest integer value of the given number.
sign()	  => It returns the sign of the given number
sin()	    => It returns the sine of the given number.
sinh()	  => It returns the hyperbolic sine of the given number.
sqrt()	  => It returns the square root of the given number
tan()	    => It returns the tangent of the given number.
tanh()	  => It returns the hyperbolic tangent of the given number.
trunc()	  => It returns an integer part of the given number.

---------------------------------------------------------------------------------------------
# JavaScript Number Object:
---------------------------------------------------------------------------------------------
The JavaScript number object enables you to represent a numeric value. It may be integer or floating-point. 

Syntax: var n=new Number(value);

=> JavaScript Number Constants:
-------------------------------
Constant	Description
MIN_VALUE	        => returns the largest minimum value.
MAX_VALUE	        => returns the largest maximum value.
POSITIVE_INFINITY	=> returns positive infinity, overflow value.
NEGATIVE_INFINITY	=> returns negative infinity, overflow value.
NaN	              => represents "Not a Number" value.

=> JavaScript Number Methods:
-----------------------------
Methods	Description
isFinite()	    => It determines whether the given value is a finite number.
isInteger()	    => It determines whether the given value is an integer.
parseFloat()	  => It converts the given string into a floating point number.
parseInt()	    => It converts the given string into an integer number.
toExponential()	=> It returns the string that represents exponential notation of the given number.
toFixed()	      => It returns the string that represents a number with exact digits after a decimal point.
toPrecision()	  => It returns the string representing a number of specified precision.
toString()	    => It returns the given number in the form of string.


-----------------------------------------------------------------------------------------------------
# JavaScript Boolean Object:
-----------------------------------------------------------------------------------------------------
JavaScript Boolean is an object that represents value in two states: true or false.
You can use the Boolean() function to find out if an expression (or a variable) is true:

=> JavaScript Boolean Methods
Method	    Description
toSource() => returns the source of Boolean object as a string.
toString() => converts Boolean into String.
valueOf()	 => converts other type into Boolean.

 











