# What is JavaScript:
------------------------------
=>JavaScript is a lightweight, interpreted programming language.
=>It is commonly used to create dynamic and interactive elements in web applications.
=>Designed for creating network-centric applications.
=>Complementary to and integrated with Java and HTML.
=>Open and cross-platform
=>Using JavaScript we can change the HTML Elements behaviour.

JavaScript is a single-threaded programming language that we can use for client-side or server-side development. It is a dynamically typed programming language, which means that we donâ€™t care about variable data types while writing the JavaScript code. Also, it contains the control statements, operators, and objects like Array, Math, Data, etc.

Note:- 
-> We can write javascript code in <script></script> tag

-> Or we can write javascript code in external file for example "example.js"

-> the extension of javascript will be ".js"

# Features of JavaScript:
---------------------------
=> All popular web browsers support JavaScript as they provide built-in execution environments.

=> JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language.

=> JavaScript is a weakly typed language, where certain types are implicitly cast (depending on the operation).

=> JavaScript is an object-oriented programming language that uses prototypes rather than using classes for inheritance.

=> It is a light-weighted and interpreted language.

=> It is a case-sensitive language.

=> JavaScript is supportable in several operating systems including, Windows, macOS, etc.

=> It provides good control to the users over the web browsers.

# Applications of JavaScript:
-----------------------------------
JavaScript is used to create interactive websites. It is mainly used for:

-> Client-side validation
-> Dynamic drop-down menus
-> Displaying date and time
-> Displaying pop-up windows and dialog boxes (like an alert dialog box, confirm dialog box 
    and prompt dialog box)
-> Displaying clocks etc.

JavaScript Example:
<script>  
    document.write("Hello AD Class");  
</script>  

# JavaScript Comment:
------------------------
advantage:
-> To make code easy to understand
-> To avoid the unnecessary code

1. Single-line Comment
2. Multi-line Comment

# JavaScript Variable:
-------------------------------------
A JavaScript variable is simply a name of storage location. There are two types of variables in JavaScript : 
local variable and global variable.

=> Javascript Local Variable:
A JavaScript local variable is declared inside block or function. It is accessible within the function or block only.

=> Javascript Global Variable:
A JavaScript global variable is accessible from any function. A variable i.e. declared outside the function or declared with window object is known as global variable.

=> There are some rules while declaring a JavaScript variable (also known as identifiers).:
1. Name must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.
2. After first letter we can use digits (0 to 9), for example value1.
3. JavaScript variables are case sensitive, for example x and X are different variables.

Variables are Containers for Storing Data
JavaScript Variables can be declared in 4 ways:

-> Automatically
-> Using var
-> Using let
-> Using const

# JavaScript let keyword:
-> JavaScript let keyword was introduced in ES6(2015).
-> variable declared with let have Block Scope.
-> Variables declared with let must be Declared before Use.
-> Variable Declared with let cannot be Redeclared in the same Scope.

# JavaScript const keyword:
-> The const keyword was introduced in ES6(2015).
-> Variable defined with const cannot be redeclared.
-> variable defined with const can not be reassigned.
-> variable defined with const have block scope.

Note:- Always declare a variable with const when you know that the value should not be changed.

#Javascript Data Types:
--------------------------------
JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.

1. Primitive data type
2. Non-primitive (reference) data type

JavaScript primitive data types:
Data Type	 Description
String	   - represents sequence of characters e.g. "hello"
Number	   - represents numeric values e.g. 1234
Boolean	   - represents boolean value either false or true
Undefined   - represents undefined value
Null	      - represents null i.e. no value at all

2. JavaScript non-primitive data types:
Object - represents instance through which we can access members
Array  -	represents group of similar values
RegExp -	represents regular expression

Most Programming language have many number types:
Whole numbers(integers):
byte(8-bit)
short(16-bit)
int(32-bit)
long(64-bit)

# Javascript BigInt:
--------------------
All Javascript Numbers are stored in a 64-bit floating-point formats.
JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are
too big to be represented by a normal JavaScript numbers.
Example:
let abc = bigInt("012345678901234567893425235234");

JavaScript Objects:
-----------------------
JavaScript Objects are written with curly braces {}.
Objects properties are written as name:value pairs, separated by commas.


# JAVASCRIPT OPERATORS:
--------------------------------------------------
-> JavaScript operators are symbols that are used to perform operations on operands.
-> Javascript operators are used to perform different types of mathematical and logical computations.

=> There are following types of operators in JavaScript:

1. Arithmetic Operators
2. Comparison (Relational) Operators
3. Bitwise Operators
4. Logical Operators
5. Assignment Operators
6. Special Operators

1. JavaScript Arithmetic Operators:
   Arithmetic operators are used to perform arithmetic operations on Numbers.
Operator	  Description	
+	        Addition	        
-	        Subtraction	        
*	        Multiplication	    
/	        Division	        
%	        Modulus (Remainder)	
++	        Increment	        
--	        Decrement	        

2. JavaScript Comparison(Relational) Operators:
   The JavaScript comparison operator compares the two operands.
Operator	  Description
==	        equal to
===	     equal value and equal type
!=	        not equal
!==	     not equal value or not equal type
>	        greater than
<	        less than
>=	        greater than or equal to
<=	        less than or equal to
?	        ternary operator

3. JavaScript Bitwise Operators:
   The bitwise operators perform bitwise operations on operands.

Operator	  Description	
&	        Bitwise AND	
|	        Bitwise OR	
^	        Bitwise XOR	
~	        Bitwise NOT	
<<	        Bitwise Left Shift	
>>	        Bitwise Right Shift	
>>>	     Bitwise Right Shift with Zero	 

4. JavaScript Logical Operators:
Operator	   Description
&&	         logical and
||	         logical or
!	         logical not

5. Assignment Operators:
Operator	      Description	
=	            Assign
+=             Add and Assign
-=             Subtract and Assign		
*=	            Multiply and assign	
/=	            Divide and assign	var 
%=	            Modulus and assign	

6. JavaScript Special Operator:
Operator	      Description
(?:)	      -  Conditional Operator returns value based on the condition. It is like if-else.
,	         -  Comma Operator allows multiple expressions to be evaluated as single statement.
delete	   -  Delete Operator deletes a property from the object.
in	         -  In Operator checks if object has the given property
instanceof  -  checks if the object is an instance of given type
new	      -  creates an instance (object)
typeof	   -  checks the type of object.
void	      -  it discards the expression's return value.
yield	      -  checks what is returned in a generator by the generator's iterator.

-------------------------------------------------------------------------------------------------------
# JAVASCRIPT CONDITIONAL STATEMENT
-------------------------------------------------------------------------------------------------------
JavaScript conditional statements allow you to execute specific blocks of code based on conditions. 
If the condition is met, a particular block of code will run; otherwise, another block of code will
execute based on the condition.

=> In JavaScript we have the following conditional statements:
1. if Statement
2. if else statement
3. if else if statement
4. switch statement

1. if statement:
----------------
   if Statement Executes a block of code if the specified condition is true.
   Syntax:
   if (condition) 
   {
    // code to execute if condition is true
   }

2. if else statement:
---------------------
   the else statement to specify a block of code to be executed if the condition is false.
   Syntax:
   if (condition) 
   {
    // code to be executed if condition is true
   } 
   else 
   {
    // code to be executed if condition is false
   }

3. if else if statement:
------------------------
It evaluates the content only if expression is true from several expressions.
Or the else if statement to specify a new condition if the first condition is false.

Syntax:
if (condition1) {
  //  block of code to be executed if condition1 is true
} else if (condition2) {
  //  block of code to be executed if the condition1 is false and condition2 is true
} else {
  //  block of code to be executed if the condition1 is false and condition2 is false
}

4. switch Statement:
--------------------
The switch statement is used to perform different actions based on different conditions.
Or the switch statement to select one of many code blocks to be executed.
Syntax:
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}

---------------------------------------------------------------------------------------------------------
# JAVASCRIPT LOOPS
--------------------------------------------------------------------------------------------------------
-> In JavaScript, loops are used to execute a block of code repeatedly until a specified condition is met. 
-> The JavaScript loops are used to iterate the piece of code using for, while, do while loops. 
   It makes the code compact. It is mostly used in array.

  Types Of Loops in Javascript:
  1. for loop
  2. while loop
  3. do-while loop

  1. for loop:
  -------------
  Executes a block of code a specified number of times.
  syntax:
  for (initialization; condition; increment/decrement) 
  {
    // code block to be executed
  }

  2. while loop:
  --------------
  The while loop executes a block of code as long as a specified condition is true.
  Syntax:
  while (condition)  
  {  
    code to be executed  
  }  

  3. do-while loop:
  -----------------
  The JavaScript do while loop iterates the elements for the infinite number of times like while loop. But, code is executed at least once whether condition is true or false. 
  Syntax:
  do
  {  
    code to be executed  
  }
  while (condition);  











